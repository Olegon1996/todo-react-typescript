{"version":3,"sources":["components/Navbar.tsx","components/ToDoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","to","ToDoForm","onAdd","ref","useRef","onKeyPress","event","key","current","value","type","id","placeholder","htmlFor","TodoList","listTodo","toggleHandler","removeHandler","length","map","item","classes","completed","push","join","checked","onChange","title","onClick","TodosPage","useState","todos","setTodos","useEffect","localTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","todoId","element","filter","AboutPage","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAIaA,EAAmB,WAC9B,OACE,6BACE,yBAAKC,UAAU,+BACb,yBAAKA,UAAU,cAAf,uBAGA,wBAAIA,UAAU,8BACZ,4BACE,kBAAC,IAAD,CAASC,GAAG,KAAZ,UAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,UAAZ,oB,gBCRCC,EAA4B,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACnCC,EAAMC,iBAAyB,MASrC,OACE,yBAAKL,UAAU,mBACb,2BACEI,IAAKA,EACLE,WAXkB,SAACC,GACL,UAAdA,EAAMC,MACNL,EAAOC,EAAIK,QAASC,OACtBN,EAAIK,QAASC,MAAQ,KASnBC,KAAK,OACLC,GAAG,QACHC,YAAY,oBAEd,2BAAOC,QAAQ,QAAQd,UAAU,UAAjC,qBCjBOe,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,cACAC,EACI,EADJA,cAEA,OAAwB,IAApBF,EAASG,OACJ,wBAAInB,UAAU,UAAd,8BAIP,4BACGgB,EAASI,KAAI,SAAAC,GACZ,IAAMC,EAAU,CAAC,QAIjB,OAHID,EAAKE,WACPD,EAAQE,KAAK,aAGb,wBAAIxB,UAAWsB,EAAQG,KAAK,KAAMjB,IAAKa,EAAKT,IAC1C,+BACE,2BACED,KAAK,WACLe,QAASL,EAAKE,UACdI,SAAU,kBAAMV,EAAcI,EAAKT,OAErC,8BAAOS,EAAKO,OACZ,uBACE5B,UAAU,0BACV6B,QAAS,kBAAMX,EAAcG,EAAKT,MAFpC,iBC5BDkB,EAAsB,WAAO,IAAD,EACbC,mBAAiB,IADJ,mBAChCC,EADgC,KACzBC,EADyB,KAGvCC,qBAAU,WACR,IAAMC,EAAaC,KAAKC,MACtBC,aAAaC,QAAQ,UAAY,MAEnCN,EAASE,KACR,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAL,YAAmBT,OAChD,CAACA,IA4BJ,OACE,yBAAKhC,UAAU,aACb,kBAAC,EAAD,CAAUG,MA5BK,SAACO,GAClB,GAAIA,EAAO,CACT,IAAMgC,EAAgB,CACpBd,MAAOlB,EACPE,GAAI+B,KAAKC,MACTrB,WAAW,GAEbU,GAAS,SAAAY,GAAI,OAAKH,GAAL,mBAAiBG,WAsB9B,kBAAC,EAAD,CACE7B,SAAUgB,EACVf,cApBgB,SAAC6B,GACrBb,GAAS,SAAAY,GAAI,OACXA,EAAKzB,KAAI,SAAC2B,GAIR,OAHIA,EAAQnC,KAAOkC,IACjBC,EAAQxB,WAAawB,EAAQxB,WAExBwB,SAeP7B,cAVgB,SAAC4B,GACrBb,GAAS,SAAAY,GAAI,OAAIA,EAAKG,QAAO,SAAA3B,GAAI,OAAIA,EAAKT,KAAOkC,a,OCxCxCG,EAAsB,WACjC,OACE,yBAAKjD,UAAU,aACb,yCACA,wQAMA,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,OAA1B,mBCISkD,EAZO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAWrB,EAAWsB,KAAK,IAAIC,OAAK,IAC3C,kBAAC,IAAD,CAAOF,UAAWF,EAAWG,KAAK,cCAtBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a5d33c8d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../index.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport const Navbar: React.FC = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper purple teal px1\">\r\n        <div className=\"brand-logo\">\r\n          React + Typesctript\r\n        </div>\r\n        <ul className=\"right hide-on-med-and-down\">\r\n          <li>\r\n            <NavLink to=\"/\">To Do</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/about\">Information</NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport \"../index.css\";\r\n\r\ntype Props = {\r\n    onAdd: (title: string) => void;\r\n}\r\n\r\n\r\nexport const ToDoForm: React.FC<Props> = ({onAdd}) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n        onAdd( ref.current!.value)\r\n      ref.current!.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-field mt2\">\r\n      <input\r\n        ref={ref}\r\n        onKeyPress={keyPressHandler}\r\n        type=\"text\"\r\n        id=\"title\"\r\n        placeholder=\"write your todo\"\r\n      />\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        write your todo\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ToDo } from \"../interfaces\";\r\nimport \"../index.css\";\r\n\r\ntype Props = {\r\n  listTodo: ToDo[];\r\n  toggleHandler: (id: number) => void;\r\n  removeHandler: (id: number) => void;\r\n};\r\n\r\nexport const TodoList: React.FC<Props> = ({\r\n  listTodo,\r\n  toggleHandler,\r\n  removeHandler\r\n}) => {\r\n  if (listTodo.length === 0) {\r\n    return <h1 className='center'>You haven't anything to do</h1>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {listTodo.map(item => {\r\n        const classes = [\"todo\"];\r\n        if (item.completed) {\r\n          classes.push(\"completed\");\r\n        }\r\n        return (\r\n          <li className={classes.join(\" \")} key={item.id}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={item.completed}\r\n                onChange={() => toggleHandler(item.id)}\r\n              />\r\n              <span>{item.title}</span>\r\n              <i\r\n                className=\"material-icons red-text\"\r\n                onClick={() => removeHandler(item.id)}\r\n              >\r\n                delete\r\n              </i>\r\n            </label>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ToDoForm } from \"../components/ToDoForm\";\r\nimport { TodoList } from \"./../components/TodoList\";\r\nimport { ToDo } from \"../interfaces\";\r\n\r\nimport \"../index.css\";\r\n\r\nexport const TodosPage: React.FC = () => {\r\n  const [todos, setTodos] = useState<ToDo[]>([]);\r\n\r\n  useEffect(() => {\r\n    const localTodos = JSON.parse(\r\n      localStorage.getItem(\"todos\") || \"[]\"\r\n    ) as ToDo[];\r\n    setTodos(localTodos);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify([...todos]));\r\n  }, [todos]);\r\n\r\n  const addHandler = (value: string) => {\r\n    if (value) {\r\n      const newTodo: ToDo = {\r\n        title: value,\r\n        id: Date.now(),\r\n        completed: false\r\n      };\r\n      setTodos(prev => [newTodo, ...prev]);\r\n    }\r\n  };\r\n\r\n  const toggleHandler = (todoId: number) => {\r\n    setTodos(prev =>\r\n      prev.map((element: ToDo) => {\r\n        if (element.id === todoId) {\r\n          element.completed = !element.completed;\r\n        }\r\n        return element;\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeHandler = (todoId: number) => {\r\n    setTodos(prev => prev.filter(item => item.id !== todoId));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <ToDoForm onAdd={addHandler} />\r\n      <TodoList\r\n        listTodo={todos}\r\n        toggleHandler={toggleHandler}\r\n        removeHandler={removeHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport '../index.css';\r\n\r\nexport const AboutPage: React.FC = () => {\r\n  return (\r\n    <div className='container'>\r\n      <h1>Info page</h1>\r\n      <p>\r\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quidem aperiam\r\n        nostrum possimus dolor eaque, exercitationem tenetur, debitis,\r\n        voluptatibus recusandae libero quos sint nesciunt quasi qui dolorum cum\r\n        optio ratione doloremque!\r\n      </p>\r\n      <NavLink to='/' className='btn'>Previous page</NavLink>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { TodosPage } from \"./pages/TodosPage\";\nimport {HashRouter, Switch, Route} from 'react-router-dom';\nimport { AboutPage } from './pages/AboutPage';\n\nconst App: React.FC = () => {\n  return (\n    <HashRouter>\n      <Navbar />\n      <Switch>\n        <Route component={TodosPage} path='/' exact/>\n        <Route component={AboutPage} path='/about'/>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}